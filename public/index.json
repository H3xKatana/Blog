[{"content":"Introduction In this Sherlock writeup, we delve into analyzing Windows artifacts, specifically focusing on notification artifacts. All notifications in Windows are stored in a SQLite database within a notification table, typically in XML format.\nTo facilitate analysis, you can use the following Python script to import the database file as a CSV file or utilize any online SQLite viewer.\n# Python script for exporting Windows 10 notification data to CSV # Usage: python WPNtoCSV.py inputDB outputCSV import sqlite3 import csv import sys def generateCSV(csr, outputfilename): csr.execute(\u0026#34;\u0026#34;\u0026#34;SELECT n.\u0026#39;Order\u0026#39;, n.Id, n.Type, nh.PrimaryId AS HandlerPrimaryId, nh.CreatedTime AS HandlerCreatedTime, nh.ModifiedTime AS HandlerModifiedTime, n.Payload, CASE WHEN n.ExpiryTime != 0 THEN datetime((n.ExpiryTime/10000000)-11644473600, \u0026#39;unixepoch\u0026#39;) ELSE n.ExpiryTime END AS ExpiryTime, CASE WHEN n.ArrivalTime != 0 THEN datetime((n.ArrivalTime/10000000)-11644473600, \u0026#39;unixepoch\u0026#39;) ELSE n.ArrivalTime END AS ArrivalTime FROM Notification n INNER JOIN NotificationHandler nh ON n.HandlerID = nh.RecordID\u0026#34;\u0026#34;\u0026#34;) result = csr.fetchall() with open(outputfilename, \u0026#34;w\u0026#34;, newline=\u0026#39;\u0026#39;, encoding=\u0026#34;utf-8\u0026#34;) as f: writer = csv.writer(f, delimiter=\u0026#39;\\t\u0026#39;) writer.writerow(list(map(lambda x: x[0], csr.description))) for line in result: lst = list(line) lst[-2] = \u0026#34;\u0026#34; if lst[-2] == 0 else lst[-2] lst[-1] = \u0026#34;\u0026#34; if lst[-1] == 0 else lst[-1] writer.writerow(lst) def printMetainfo(csr): csr.execute(\u0026#34;SELECT * FROM Metadata\u0026#34;) result = csr.fetchall() print(\u0026#34;\u0026#34;\u0026#34;\\n Notifications - Metadata ------------------------ \u0026#34;\u0026#34;\u0026#34;) for line in result: print(\u0026#34;\\t\u0026#34; + line[0] + \u0026#34;: \u0026#34; + str(line[1])) print() if __name__ == \u0026#34;__main__\u0026#34;: if len(sys.argv) == 3: conn = sqlite3.connect(sys.argv[1]) csr = conn.cursor() printMetainfo(csr) generateCSV(csr, sys.argv[2]) else: print(\u0026#34;\u0026#34;\u0026#34;\\n Windows 10 Notifications to CSV ------------------------------- This script processes the wpndatabase.db notifications database from Windows 10 and gives a truncated, tab-delimited file as output. File location: %APPDATA%\\Local\\Microsoft\\Windows\\\\Notifications\\wpndatabase.db Usage: WPNtoCSV.py inputDB outputCSV Example: WPNtoCSV.py wpndatabase.db notifications.csv \u0026#34;\u0026#34;\u0026#34;) Task Analysis Identify Sender: Analyze the URL to identify the sender of the notification.\nTitle Examination: Examine the titles of the notifications.\nMessage Sender Identification: Determine who is sending the messages.\nRoom Number Analysis: Investigate the significance of room numbers in the notifications.\nPassword Detection: Detect potentially easy-to-find passwords within the messages.\nDrive URL Analysis: Examine plain URLs related to drives.\nTimestamp Conversion: Utilize the provided script to convert timestamps for message delivery.\nimport datetime # Define the timestamp value from the message timestamp_str = \u0026#34;1681986889.660179\u0026#34; # Convert the timestamp string to a float (assuming it\u0026#39;s in seconds since Unix epoch) timestamp_seconds = float(timestamp_str) # Convert the timestamp to a datetime object in UTC timezone utc_datetime = datetime.datetime.utcfromtimestamp(timestamp_seconds) # Print the UTC datetime in a readable format print(\u0026#34;Message Delivered at (UTC):\u0026#34;, utc_datetime) Monetary Value Assessment: Analyze monetary values mentioned, e.g., \u0026ldquo;10000\u0026rdquo;. ","permalink":"http://localhost:1313/post/3/jinglebell/","summary":"Explore Windows artifact analysis focusing on notification artifacts in this Jingle Bell HackTheBox Sherlock writeup.","title":"Jingle Bell HackTheBox Sherlock Writeup"}]